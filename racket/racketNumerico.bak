(define (nextFalsi f a b)
  (- b (* (f b) (/ (- b a) (- (f b) (f a)))))
)

(define (nextBiseccion f a b)
  (/ (+ b a) '2)
  )

(define (f x)
  (- (+ (expt x '5) (expt x '3) x) '3)
  )

(define (find f a b iter next)
  (cond [(zero? iter) ()]
        [(positive? (* (f a) (f (next f a b)))) (cons (next f a b) (find f (next f a b) b (- iter 1) next))]
        [else (cons (next f a b) (find f a (next f a b) (- iter 1) next))]
        )
  )
